openapi: 3.1.0
info:
  title: User API
  description: API for managing users
  version: 1.0.0

servers:
  - url: http://localhost:5000
    description: Development server

paths:
  /user:
    get:
      summary: Get all users
      tags:
        - Users
      responses:
        '200':
          description: List of all users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      summary: Create a new user
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUser'
            examples:
              newUserExample:
                summary: Example of a new user
                value:
                  firstName: "Shubham"
                  lastName: "Salian"
                  email: "tvsb0@northeastern.edu"
                  password: "hp@123"
                  phone: "8574217904"
                  homeTown: "India"
                  major: "computer software engg"
                  intake: "fall2024"
                  workExperience: 0
                  previousEducation: "Ahemdabad University"
                  aboutMe: "Im Scoially Antisocial"
                  photo: "https://fakeimg.pl/400x400"
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /user/{id}:
    get:
      summary: Get a user by ID
      tags:
        - Users
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier for the user
      responses:
        '200':
          description: Details of the requested user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      summary: Update a user
      tags:
        - Users
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier for the user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUser'
            examples:
              updateUserExample:
                summary: Example of updating a user
                value:
                  firstName: "John"
                  lastName: "Updated"
                  email: "johnupdated@example.com"
                  password: "new_encrypted_password"
                  updatedAt: "2024-11-18T11:00:00Z"
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Delete a user
      tags:
        - Users
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier for the user
      responses:
        '204':
          description: User deleted successfully
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the user
        firstName:
          type: string
          description: First name of the user
        lastName:
          type: string
          description: Last name of the user
        email:
          type: string
          description: Email address of the user
        password:
          type: string
          description: Encrypted password of the user
        phone:
          type: string
          description: Contact phone number
        homeTown:
          type: string
          description: Hometown of the user
        major:
          type: string
          description: User's major
        intake:
          type: string
          description: Intake semester
        workExperience:
          type: number
          description: Years of work experience
        previousEducation:
          type: string
          description: Previous educational institution
        aboutMe:
          type: string
          description: A brief introduction about the user
        photo:
          type: string
          description: URL to the user's profile photo
        createdAt:
          type: string
          format: date-time
          description: Date and time the user was created
        updatedAt:
          type: string
          format: date-time
          description: Date and time the user was last updated

    NewUser:
      type: object
      allOf:
        - $ref: '#/components/schemas/User'
        - properties:
            id:
              readOnly: true

    ErrorResponse:
      type: object
      properties:
        code:
          type: integer
          description: HTTP status code
        message:
          type: string
          description: Error message
